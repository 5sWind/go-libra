// +build js
// Code generated by protoc-gen-gopherjs. DO NOT EDIT.
// source: language_storage.proto

package pbtypes

import jspb "github.com/johanbrandhorst/protobuf/jspb"

// This is a compile-time assertion to ensure that this generated file
// is compatible with the jspb package it is being compiled against.
const _ = jspb.JspbPackageIsVersion2

// / The unique identifier for a module on the chain.
type ModuleId struct {
	Address []byte
	Name    string
}

// GetAddress gets the Address of the ModuleId.
func (m *ModuleId) GetAddress() (x []byte) {
	if m == nil {
		return x
	}
	return m.Address
}

// GetName gets the Name of the ModuleId.
func (m *ModuleId) GetName() (x string) {
	if m == nil {
		return x
	}
	return m.Name
}

// MarshalToWriter marshals ModuleId to the provided writer.
func (m *ModuleId) MarshalToWriter(writer jspb.Writer) {
	if m == nil {
		return
	}

	if len(m.Address) > 0 {
		writer.WriteBytes(1, m.Address)
	}

	if len(m.Name) > 0 {
		writer.WriteString(2, m.Name)
	}

	return
}

// Marshal marshals ModuleId to a slice of bytes.
func (m *ModuleId) Marshal() []byte {
	writer := jspb.NewWriter()
	m.MarshalToWriter(writer)
	return writer.GetResult()
}

// UnmarshalFromReader unmarshals a ModuleId from the provided reader.
func (m *ModuleId) UnmarshalFromReader(reader jspb.Reader) *ModuleId {
	for reader.Next() {
		if m == nil {
			m = &ModuleId{}
		}

		switch reader.GetFieldNumber() {
		case 1:
			m.Address = reader.ReadBytes()
		case 2:
			m.Name = reader.ReadString()
		default:
			reader.SkipField()
		}
	}

	return m
}

// Unmarshal unmarshals a ModuleId from a slice of bytes.
func (m *ModuleId) Unmarshal(rawBytes []byte) (*ModuleId, error) {
	reader := jspb.NewReader(rawBytes)

	m = m.UnmarshalFromReader(reader)

	if err := reader.Err(); err != nil {
		return nil, err
	}

	return m, nil
}
