// +build js
// Code generated by protoc-gen-gopherjs. DO NOT EDIT.
// source: validator_change.proto

package pbtypes

import jspb "github.com/johanbrandhorst/protobuf/jspb"

// This is a compile-time assertion to ensure that this generated file
// is compatible with the jspb package it is being compiled against.
const _ = jspb.JspbPackageIsVersion2

// This is used to prove validator changes.  When a validator is changing, it
// triggers an event on /validator_change_account/events/sent.  To tell the
// client about validator changes, we query
// /validator_change_account/events/sent to get all versions that contain
// validator changes after the version that we are trying to update from. For
// each of these versions, the old validator set would have signed the ledger
// info at that version.  The client needs this as well as the event results +
// proof.  The client can then verify that these events were under the current
// tree and that the changes were signed by the old validators (and that the
// events correctly show which validators are the new validators).
type ValidatorChangeEventWithProof struct {
	LedgerInfoWithSigs []*LedgerInfoWithSignatures
}

// GetLedgerInfoWithSigs gets the LedgerInfoWithSigs of the ValidatorChangeEventWithProof.
func (m *ValidatorChangeEventWithProof) GetLedgerInfoWithSigs() (x []*LedgerInfoWithSignatures) {
	if m == nil {
		return x
	}
	return m.LedgerInfoWithSigs
}

// MarshalToWriter marshals ValidatorChangeEventWithProof to the provided writer.
func (m *ValidatorChangeEventWithProof) MarshalToWriter(writer jspb.Writer) {
	if m == nil {
		return
	}

	for _, msg := range m.LedgerInfoWithSigs {
		writer.WriteMessage(1, func() {
			msg.MarshalToWriter(writer)
		})
	}

	return
}

// Marshal marshals ValidatorChangeEventWithProof to a slice of bytes.
func (m *ValidatorChangeEventWithProof) Marshal() []byte {
	writer := jspb.NewWriter()
	m.MarshalToWriter(writer)
	return writer.GetResult()
}

// UnmarshalFromReader unmarshals a ValidatorChangeEventWithProof from the provided reader.
func (m *ValidatorChangeEventWithProof) UnmarshalFromReader(reader jspb.Reader) *ValidatorChangeEventWithProof {
	for reader.Next() {
		if m == nil {
			m = &ValidatorChangeEventWithProof{}
		}

		switch reader.GetFieldNumber() {
		case 1:
			reader.ReadMessage(func() {
				m.LedgerInfoWithSigs = append(m.LedgerInfoWithSigs, new(LedgerInfoWithSignatures).UnmarshalFromReader(reader))
			})
		default:
			reader.SkipField()
		}
	}

	return m
}

// Unmarshal unmarshals a ValidatorChangeEventWithProof from a slice of bytes.
func (m *ValidatorChangeEventWithProof) Unmarshal(rawBytes []byte) (*ValidatorChangeEventWithProof, error) {
	reader := jspb.NewReader(rawBytes)

	m = m.UnmarshalFromReader(reader)

	if err := reader.Err(); err != nil {
		return nil, err
	}

	return m, nil
}
