// Code generated by protoc-gen-go. DO NOT EDIT.
// source: vm_errors.proto

package pbtypes

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The status of a transaction as determined by the prologue.
type VMValidationStatusCode int32

const (
	// We don't want the default value to be valid
	VMValidationStatusCode_UnknownValidationStatus VMValidationStatusCode = 0
	// The transaction has a bad signature
	VMValidationStatusCode_InvalidSignature VMValidationStatusCode = 1
	// Bad account authentication key
	VMValidationStatusCode_InvalidAuthKey VMValidationStatusCode = 2
	// Sequence number is too old
	VMValidationStatusCode_SequenceNumberTooOld VMValidationStatusCode = 3
	// Sequence number is too new
	VMValidationStatusCode_SequenceNumberTooNew VMValidationStatusCode = 4
	// Insufficient balance to pay minimum transaction fee
	VMValidationStatusCode_InsufficientBalanceForTransactionFee VMValidationStatusCode = 5
	// The transaction has expired
	VMValidationStatusCode_TransactionExpired VMValidationStatusCode = 6
	// The sending account does not exist
	VMValidationStatusCode_SendingAccountDoesNotExist VMValidationStatusCode = 7
	// This write set transaction was rejected because it did not meet the
	// requirements for one.
	VMValidationStatusCode_RejectedWriteSet VMValidationStatusCode = 8
	// This write set transaction cannot be applied to the current state.
	VMValidationStatusCode_InvalidWriteSet VMValidationStatusCode = 9
	// Length of program field in raw transaction exceeded max length
	VMValidationStatusCode_ExceededMaxTransactionSize VMValidationStatusCode = 10
	// This script is not on our whitelist of script.
	VMValidationStatusCode_UnknownScript VMValidationStatusCode = 11
	// Transaction is trying to publish a new module.
	VMValidationStatusCode_UnknownModule VMValidationStatusCode = 12
	// Max gas units submitted with transaction exceeds max gas units bound
	// in VM
	VMValidationStatusCode_MaxGasUnitsExceedsMaxGasUnitsBound VMValidationStatusCode = 13
	// Max gas units submitted with transaction not enough to cover the
	// intrinsic cost of the transaction.
	VMValidationStatusCode_MaxGasUnitsBelowMinTransactionGasUnits VMValidationStatusCode = 14
	// Gas unit price submitted with transaction is below minimum gas price
	// set in the VM.
	VMValidationStatusCode_GasUnitPriceBelowMinBound VMValidationStatusCode = 15
	// Gas unit price submitted with the transaction is above the maximum
	// gas price set in the VM.
	VMValidationStatusCode_GasUnitPriceAboveMaxBound VMValidationStatusCode = 16
)

var VMValidationStatusCode_name = map[int32]string{
	0:  "UnknownValidationStatus",
	1:  "InvalidSignature",
	2:  "InvalidAuthKey",
	3:  "SequenceNumberTooOld",
	4:  "SequenceNumberTooNew",
	5:  "InsufficientBalanceForTransactionFee",
	6:  "TransactionExpired",
	7:  "SendingAccountDoesNotExist",
	8:  "RejectedWriteSet",
	9:  "InvalidWriteSet",
	10: "ExceededMaxTransactionSize",
	11: "UnknownScript",
	12: "UnknownModule",
	13: "MaxGasUnitsExceedsMaxGasUnitsBound",
	14: "MaxGasUnitsBelowMinTransactionGasUnits",
	15: "GasUnitPriceBelowMinBound",
	16: "GasUnitPriceAboveMaxBound",
}

var VMValidationStatusCode_value = map[string]int32{
	"UnknownValidationStatus":                0,
	"InvalidSignature":                       1,
	"InvalidAuthKey":                         2,
	"SequenceNumberTooOld":                   3,
	"SequenceNumberTooNew":                   4,
	"InsufficientBalanceForTransactionFee":   5,
	"TransactionExpired":                     6,
	"SendingAccountDoesNotExist":             7,
	"RejectedWriteSet":                       8,
	"InvalidWriteSet":                        9,
	"ExceededMaxTransactionSize":             10,
	"UnknownScript":                          11,
	"UnknownModule":                          12,
	"MaxGasUnitsExceedsMaxGasUnitsBound":     13,
	"MaxGasUnitsBelowMinTransactionGasUnits": 14,
	"GasUnitPriceBelowMinBound":              15,
	"GasUnitPriceAboveMaxBound":              16,
}

func (x VMValidationStatusCode) String() string {
	return proto.EnumName(VMValidationStatusCode_name, int32(x))
}

func (VMValidationStatusCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5824ced5fb3a3c2c, []int{0}
}

// When a code module/script is published it is verified. These are the
// possible errors that can arise from the verification process.
type VMVerificationErrorKind int32

const (
	// Likewise default to a unknown verification error
	VMVerificationErrorKind_UnknownVerificationError            VMVerificationErrorKind = 0
	VMVerificationErrorKind_IndexOutOfBounds                    VMVerificationErrorKind = 1
	VMVerificationErrorKind_CodeUnitIndexOutOfBounds            VMVerificationErrorKind = 2
	VMVerificationErrorKind_RangeOutOfBounds                    VMVerificationErrorKind = 3
	VMVerificationErrorKind_InvalidSignatureToken               VMVerificationErrorKind = 4
	VMVerificationErrorKind_InvalidFieldDefReference            VMVerificationErrorKind = 5
	VMVerificationErrorKind_RecursiveStructDefinition           VMVerificationErrorKind = 6
	VMVerificationErrorKind_InvalidResourceField                VMVerificationErrorKind = 7
	VMVerificationErrorKind_InvalidFallThrough                  VMVerificationErrorKind = 8
	VMVerificationErrorKind_JoinFailure                         VMVerificationErrorKind = 9
	VMVerificationErrorKind_NegativeStackSizeWithinBlock        VMVerificationErrorKind = 10
	VMVerificationErrorKind_UnbalancedStack                     VMVerificationErrorKind = 11
	VMVerificationErrorKind_InvalidMainFunctionSignature        VMVerificationErrorKind = 12
	VMVerificationErrorKind_DuplicateElement                    VMVerificationErrorKind = 13
	VMVerificationErrorKind_InvalidModuleHandle                 VMVerificationErrorKind = 14
	VMVerificationErrorKind_UnimplementedHandle                 VMVerificationErrorKind = 15
	VMVerificationErrorKind_InconsistentFields                  VMVerificationErrorKind = 16
	VMVerificationErrorKind_UnusedFields                        VMVerificationErrorKind = 17
	VMVerificationErrorKind_LookupFailed                        VMVerificationErrorKind = 18
	VMVerificationErrorKind_VisibilityMismatch                  VMVerificationErrorKind = 19
	VMVerificationErrorKind_TypeResolutionFailure               VMVerificationErrorKind = 20
	VMVerificationErrorKind_TypeMismatch                        VMVerificationErrorKind = 21
	VMVerificationErrorKind_MissingDependency                   VMVerificationErrorKind = 22
	VMVerificationErrorKind_PopReferenceError                   VMVerificationErrorKind = 23
	VMVerificationErrorKind_PopResourceError                    VMVerificationErrorKind = 24
	VMVerificationErrorKind_ReleaseRefTypeMismatchError         VMVerificationErrorKind = 25
	VMVerificationErrorKind_BrTypeMismatchError                 VMVerificationErrorKind = 26
	VMVerificationErrorKind_AbortTypeMismatchError              VMVerificationErrorKind = 27
	VMVerificationErrorKind_StLocTypeMismatchError              VMVerificationErrorKind = 28
	VMVerificationErrorKind_StLocUnsafeToDestroyError           VMVerificationErrorKind = 29
	VMVerificationErrorKind_RetUnsafeToDestroyError             VMVerificationErrorKind = 30
	VMVerificationErrorKind_RetTypeMismatchError                VMVerificationErrorKind = 31
	VMVerificationErrorKind_FreezeRefTypeMismatchError          VMVerificationErrorKind = 32
	VMVerificationErrorKind_FreezeRefExistsMutableBorrowError   VMVerificationErrorKind = 33
	VMVerificationErrorKind_BorrowFieldTypeMismatchError        VMVerificationErrorKind = 34
	VMVerificationErrorKind_BorrowFieldBadFieldError            VMVerificationErrorKind = 35
	VMVerificationErrorKind_BorrowFieldExistsMutableBorrowError VMVerificationErrorKind = 36
	VMVerificationErrorKind_CopyLocUnavailableError             VMVerificationErrorKind = 37
	VMVerificationErrorKind_CopyLocResourceError                VMVerificationErrorKind = 38
	VMVerificationErrorKind_CopyLocExistsBorrowError            VMVerificationErrorKind = 39
	VMVerificationErrorKind_MoveLocUnavailableError             VMVerificationErrorKind = 40
	VMVerificationErrorKind_MoveLocExistsBorrowError            VMVerificationErrorKind = 41
	VMVerificationErrorKind_BorrowLocReferenceError             VMVerificationErrorKind = 42
	VMVerificationErrorKind_BorrowLocUnavailableError           VMVerificationErrorKind = 43
	VMVerificationErrorKind_BorrowLocExistsBorrowError          VMVerificationErrorKind = 44
	VMVerificationErrorKind_CallTypeMismatchError               VMVerificationErrorKind = 45
	VMVerificationErrorKind_CallBorrowedMutableReferenceError   VMVerificationErrorKind = 46
	VMVerificationErrorKind_PackTypeMismatchError               VMVerificationErrorKind = 47
	VMVerificationErrorKind_UnpackTypeMismatchError             VMVerificationErrorKind = 48
	VMVerificationErrorKind_ReadRefTypeMismatchError            VMVerificationErrorKind = 49
	VMVerificationErrorKind_ReadRefResourceError                VMVerificationErrorKind = 50
	VMVerificationErrorKind_ReadRefExistsMutableBorrowError     VMVerificationErrorKind = 51
	VMVerificationErrorKind_WriteRefTypeMismatchError           VMVerificationErrorKind = 52
	VMVerificationErrorKind_WriteRefResourceError               VMVerificationErrorKind = 53
	VMVerificationErrorKind_WriteRefExistsBorrowError           VMVerificationErrorKind = 54
	VMVerificationErrorKind_WriteRefNoMutableReferenceError     VMVerificationErrorKind = 55
	VMVerificationErrorKind_IntegerOpTypeMismatchError          VMVerificationErrorKind = 56
	VMVerificationErrorKind_BooleanOpTypeMismatchError          VMVerificationErrorKind = 57
	VMVerificationErrorKind_EqualityOpTypeMismatchError         VMVerificationErrorKind = 58
	VMVerificationErrorKind_ExistsResourceTypeMismatchError     VMVerificationErrorKind = 59
	VMVerificationErrorKind_ExistsNoResourceError               VMVerificationErrorKind = 60
	VMVerificationErrorKind_BorrowGlobalTypeMismatchError       VMVerificationErrorKind = 61
	VMVerificationErrorKind_BorrowGlobalNoResourceError         VMVerificationErrorKind = 62
	VMVerificationErrorKind_MoveFromTypeMismatchError           VMVerificationErrorKind = 63
	VMVerificationErrorKind_MoveFromNoResourceError             VMVerificationErrorKind = 64
	VMVerificationErrorKind_MoveToSenderTypeMismatchError       VMVerificationErrorKind = 65
	VMVerificationErrorKind_MoveToSenderNoResourceError         VMVerificationErrorKind = 66
	VMVerificationErrorKind_CreateAccountTypeMismatchError      VMVerificationErrorKind = 67
	VMVerificationErrorKind_GlobalReferenceError                VMVerificationErrorKind = 68
	// The self address of a module the transaction is publishing is not the sender address
	VMVerificationErrorKind_ModuleAddressDoesNotMatchSender VMVerificationErrorKind = 69
	// The module does not have any module handles. Each module or script must have at least one module handle.
	VMVerificationErrorKind_NoModuleHandles                           VMVerificationErrorKind = 70
	VMVerificationErrorKind_MissingAcquiresResourceAnnotationError    VMVerificationErrorKind = 71
	VMVerificationErrorKind_ExtraneousAcquiresResourceAnnotationError VMVerificationErrorKind = 72
	VMVerificationErrorKind_DuplicateAcquiresResourceAnnotationError  VMVerificationErrorKind = 73
	VMVerificationErrorKind_InvalidAcquiresResourceAnnotationError    VMVerificationErrorKind = 74
)

var VMVerificationErrorKind_name = map[int32]string{
	0:  "UnknownVerificationError",
	1:  "IndexOutOfBounds",
	2:  "CodeUnitIndexOutOfBounds",
	3:  "RangeOutOfBounds",
	4:  "InvalidSignatureToken",
	5:  "InvalidFieldDefReference",
	6:  "RecursiveStructDefinition",
	7:  "InvalidResourceField",
	8:  "InvalidFallThrough",
	9:  "JoinFailure",
	10: "NegativeStackSizeWithinBlock",
	11: "UnbalancedStack",
	12: "InvalidMainFunctionSignature",
	13: "DuplicateElement",
	14: "InvalidModuleHandle",
	15: "UnimplementedHandle",
	16: "InconsistentFields",
	17: "UnusedFields",
	18: "LookupFailed",
	19: "VisibilityMismatch",
	20: "TypeResolutionFailure",
	21: "TypeMismatch",
	22: "MissingDependency",
	23: "PopReferenceError",
	24: "PopResourceError",
	25: "ReleaseRefTypeMismatchError",
	26: "BrTypeMismatchError",
	27: "AbortTypeMismatchError",
	28: "StLocTypeMismatchError",
	29: "StLocUnsafeToDestroyError",
	30: "RetUnsafeToDestroyError",
	31: "RetTypeMismatchError",
	32: "FreezeRefTypeMismatchError",
	33: "FreezeRefExistsMutableBorrowError",
	34: "BorrowFieldTypeMismatchError",
	35: "BorrowFieldBadFieldError",
	36: "BorrowFieldExistsMutableBorrowError",
	37: "CopyLocUnavailableError",
	38: "CopyLocResourceError",
	39: "CopyLocExistsBorrowError",
	40: "MoveLocUnavailableError",
	41: "MoveLocExistsBorrowError",
	42: "BorrowLocReferenceError",
	43: "BorrowLocUnavailableError",
	44: "BorrowLocExistsBorrowError",
	45: "CallTypeMismatchError",
	46: "CallBorrowedMutableReferenceError",
	47: "PackTypeMismatchError",
	48: "UnpackTypeMismatchError",
	49: "ReadRefTypeMismatchError",
	50: "ReadRefResourceError",
	51: "ReadRefExistsMutableBorrowError",
	52: "WriteRefTypeMismatchError",
	53: "WriteRefResourceError",
	54: "WriteRefExistsBorrowError",
	55: "WriteRefNoMutableReferenceError",
	56: "IntegerOpTypeMismatchError",
	57: "BooleanOpTypeMismatchError",
	58: "EqualityOpTypeMismatchError",
	59: "ExistsResourceTypeMismatchError",
	60: "ExistsNoResourceError",
	61: "BorrowGlobalTypeMismatchError",
	62: "BorrowGlobalNoResourceError",
	63: "MoveFromTypeMismatchError",
	64: "MoveFromNoResourceError",
	65: "MoveToSenderTypeMismatchError",
	66: "MoveToSenderNoResourceError",
	67: "CreateAccountTypeMismatchError",
	68: "GlobalReferenceError",
	69: "ModuleAddressDoesNotMatchSender",
	70: "NoModuleHandles",
	71: "MissingAcquiresResourceAnnotationError",
	72: "ExtraneousAcquiresResourceAnnotationError",
	73: "DuplicateAcquiresResourceAnnotationError",
	74: "InvalidAcquiresResourceAnnotationError",
}

var VMVerificationErrorKind_value = map[string]int32{
	"UnknownVerificationError":                  0,
	"IndexOutOfBounds":                          1,
	"CodeUnitIndexOutOfBounds":                  2,
	"RangeOutOfBounds":                          3,
	"InvalidSignatureToken":                     4,
	"InvalidFieldDefReference":                  5,
	"RecursiveStructDefinition":                 6,
	"InvalidResourceField":                      7,
	"InvalidFallThrough":                        8,
	"JoinFailure":                               9,
	"NegativeStackSizeWithinBlock":              10,
	"UnbalancedStack":                           11,
	"InvalidMainFunctionSignature":              12,
	"DuplicateElement":                          13,
	"InvalidModuleHandle":                       14,
	"UnimplementedHandle":                       15,
	"InconsistentFields":                        16,
	"UnusedFields":                              17,
	"LookupFailed":                              18,
	"VisibilityMismatch":                        19,
	"TypeResolutionFailure":                     20,
	"TypeMismatch":                              21,
	"MissingDependency":                         22,
	"PopReferenceError":                         23,
	"PopResourceError":                          24,
	"ReleaseRefTypeMismatchError":               25,
	"BrTypeMismatchError":                       26,
	"AbortTypeMismatchError":                    27,
	"StLocTypeMismatchError":                    28,
	"StLocUnsafeToDestroyError":                 29,
	"RetUnsafeToDestroyError":                   30,
	"RetTypeMismatchError":                      31,
	"FreezeRefTypeMismatchError":                32,
	"FreezeRefExistsMutableBorrowError":         33,
	"BorrowFieldTypeMismatchError":              34,
	"BorrowFieldBadFieldError":                  35,
	"BorrowFieldExistsMutableBorrowError":       36,
	"CopyLocUnavailableError":                   37,
	"CopyLocResourceError":                      38,
	"CopyLocExistsBorrowError":                  39,
	"MoveLocUnavailableError":                   40,
	"MoveLocExistsBorrowError":                  41,
	"BorrowLocReferenceError":                   42,
	"BorrowLocUnavailableError":                 43,
	"BorrowLocExistsBorrowError":                44,
	"CallTypeMismatchError":                     45,
	"CallBorrowedMutableReferenceError":         46,
	"PackTypeMismatchError":                     47,
	"UnpackTypeMismatchError":                   48,
	"ReadRefTypeMismatchError":                  49,
	"ReadRefResourceError":                      50,
	"ReadRefExistsMutableBorrowError":           51,
	"WriteRefTypeMismatchError":                 52,
	"WriteRefResourceError":                     53,
	"WriteRefExistsBorrowError":                 54,
	"WriteRefNoMutableReferenceError":           55,
	"IntegerOpTypeMismatchError":                56,
	"BooleanOpTypeMismatchError":                57,
	"EqualityOpTypeMismatchError":               58,
	"ExistsResourceTypeMismatchError":           59,
	"ExistsNoResourceError":                     60,
	"BorrowGlobalTypeMismatchError":             61,
	"BorrowGlobalNoResourceError":               62,
	"MoveFromTypeMismatchError":                 63,
	"MoveFromNoResourceError":                   64,
	"MoveToSenderTypeMismatchError":             65,
	"MoveToSenderNoResourceError":               66,
	"CreateAccountTypeMismatchError":            67,
	"GlobalReferenceError":                      68,
	"ModuleAddressDoesNotMatchSender":           69,
	"NoModuleHandles":                           70,
	"MissingAcquiresResourceAnnotationError":    71,
	"ExtraneousAcquiresResourceAnnotationError": 72,
	"DuplicateAcquiresResourceAnnotationError":  73,
	"InvalidAcquiresResourceAnnotationError":    74,
}

func (x VMVerificationErrorKind) String() string {
	return proto.EnumName(VMVerificationErrorKind_name, int32(x))
}

func (VMVerificationErrorKind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5824ced5fb3a3c2c, []int{1}
}

// These are errors that the VM might raise if a violation of internal
// invariants takes place.
type VMInvariantViolationError int32

const (
	VMInvariantViolationError_UnknownInvariantViolationError VMInvariantViolationError = 0
	VMInvariantViolationError_OutOfBoundsIndex               VMInvariantViolationError = 1
	VMInvariantViolationError_OutOfBoundsRange               VMInvariantViolationError = 2
	VMInvariantViolationError_EmptyValueStack                VMInvariantViolationError = 3
	VMInvariantViolationError_EmptyCallStack                 VMInvariantViolationError = 4
	VMInvariantViolationError_PCOverflow                     VMInvariantViolationError = 5
	VMInvariantViolationError_LinkerError                    VMInvariantViolationError = 6
	VMInvariantViolationError_LocalReferenceError            VMInvariantViolationError = 7
	VMInvariantViolationError_StorageError                   VMInvariantViolationError = 8
	VMInvariantViolationError_InternalTypeError              VMInvariantViolationError = 9
	VMInvariantViolationError_EventKeyMismatch               VMInvariantViolationError = 10
)

var VMInvariantViolationError_name = map[int32]string{
	0:  "UnknownInvariantViolationError",
	1:  "OutOfBoundsIndex",
	2:  "OutOfBoundsRange",
	3:  "EmptyValueStack",
	4:  "EmptyCallStack",
	5:  "PCOverflow",
	6:  "LinkerError",
	7:  "LocalReferenceError",
	8:  "StorageError",
	9:  "InternalTypeError",
	10: "EventKeyMismatch",
}

var VMInvariantViolationError_value = map[string]int32{
	"UnknownInvariantViolationError": 0,
	"OutOfBoundsIndex":               1,
	"OutOfBoundsRange":               2,
	"EmptyValueStack":                3,
	"EmptyCallStack":                 4,
	"PCOverflow":                     5,
	"LinkerError":                    6,
	"LocalReferenceError":            7,
	"StorageError":                   8,
	"InternalTypeError":              9,
	"EventKeyMismatch":               10,
}

func (x VMInvariantViolationError) String() string {
	return proto.EnumName(VMInvariantViolationError_name, int32(x))
}

func (VMInvariantViolationError) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5824ced5fb3a3c2c, []int{2}
}

// Errors that can arise from binary decoding (deserialization)
type BinaryError int32

const (
	BinaryError_UnknownBinaryError      BinaryError = 0
	BinaryError_Malformed               BinaryError = 1
	BinaryError_BadMagic                BinaryError = 2
	BinaryError_UnknownVersion          BinaryError = 3
	BinaryError_UnknownTableType        BinaryError = 4
	BinaryError_UnknownSignatureType    BinaryError = 5
	BinaryError_UnknownSerializedType   BinaryError = 6
	BinaryError_UnknownOpcode           BinaryError = 7
	BinaryError_BadHeaderTable          BinaryError = 8
	BinaryError_UnexpectedSignatureType BinaryError = 9
	BinaryError_DuplicateTable          BinaryError = 10
)

var BinaryError_name = map[int32]string{
	0:  "UnknownBinaryError",
	1:  "Malformed",
	2:  "BadMagic",
	3:  "UnknownVersion",
	4:  "UnknownTableType",
	5:  "UnknownSignatureType",
	6:  "UnknownSerializedType",
	7:  "UnknownOpcode",
	8:  "BadHeaderTable",
	9:  "UnexpectedSignatureType",
	10: "DuplicateTable",
}

var BinaryError_value = map[string]int32{
	"UnknownBinaryError":      0,
	"Malformed":               1,
	"BadMagic":                2,
	"UnknownVersion":          3,
	"UnknownTableType":        4,
	"UnknownSignatureType":    5,
	"UnknownSerializedType":   6,
	"UnknownOpcode":           7,
	"BadHeaderTable":          8,
	"UnexpectedSignatureType": 9,
	"DuplicateTable":          10,
}

func (x BinaryError) String() string {
	return proto.EnumName(BinaryError_name, int32(x))
}

func (BinaryError) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5824ced5fb3a3c2c, []int{3}
}

type RuntimeStatus int32

const (
	RuntimeStatus_UnknownRuntimeStatus RuntimeStatus = 0
	RuntimeStatus_Executed             RuntimeStatus = 1
	RuntimeStatus_OutOfGas             RuntimeStatus = 2
	// We tried to access a resource that does not exist under the account.
	RuntimeStatus_ResourceDoesNotExist RuntimeStatus = 3
	// We tried to create a resource under an account where that resource
	// already exists.
	RuntimeStatus_ResourceAlreadyExists RuntimeStatus = 4
	// We accessed an account that is evicted.
	RuntimeStatus_EvictedAccountAccess RuntimeStatus = 5
	// We tried to create an account at an address where an account already
	// exists.
	RuntimeStatus_AccountAddressAlreadyExists RuntimeStatus = 6
	RuntimeStatus_TypeError                   RuntimeStatus = 7
	RuntimeStatus_MissingData                 RuntimeStatus = 8
	RuntimeStatus_DataFormatError             RuntimeStatus = 9
	RuntimeStatus_InvalidData                 RuntimeStatus = 10
	RuntimeStatus_RemoteDataError             RuntimeStatus = 11
	RuntimeStatus_CannotWriteExistingResource RuntimeStatus = 12
	RuntimeStatus_ValueSerializationError     RuntimeStatus = 13
	RuntimeStatus_ValueDeserializationError   RuntimeStatus = 14
	// The sender is trying to publish a module named `M`, but the sender's account already contains
	// a module with this name.
	RuntimeStatus_DuplicateModuleName    RuntimeStatus = 15
	RuntimeStatus_ExecutionStackOverflow RuntimeStatus = 16
	RuntimeStatus_CallStackOverflow      RuntimeStatus = 17
)

var RuntimeStatus_name = map[int32]string{
	0:  "UnknownRuntimeStatus",
	1:  "Executed",
	2:  "OutOfGas",
	3:  "ResourceDoesNotExist",
	4:  "ResourceAlreadyExists",
	5:  "EvictedAccountAccess",
	6:  "AccountAddressAlreadyExists",
	7:  "TypeError",
	8:  "MissingData",
	9:  "DataFormatError",
	10: "InvalidData",
	11: "RemoteDataError",
	12: "CannotWriteExistingResource",
	13: "ValueSerializationError",
	14: "ValueDeserializationError",
	15: "DuplicateModuleName",
	16: "ExecutionStackOverflow",
	17: "CallStackOverflow",
}

var RuntimeStatus_value = map[string]int32{
	"UnknownRuntimeStatus":        0,
	"Executed":                    1,
	"OutOfGas":                    2,
	"ResourceDoesNotExist":        3,
	"ResourceAlreadyExists":       4,
	"EvictedAccountAccess":        5,
	"AccountAddressAlreadyExists": 6,
	"TypeError":                   7,
	"MissingData":                 8,
	"DataFormatError":             9,
	"InvalidData":                 10,
	"RemoteDataError":             11,
	"CannotWriteExistingResource": 12,
	"ValueSerializationError":     13,
	"ValueDeserializationError":   14,
	"DuplicateModuleName":         15,
	"ExecutionStackOverflow":      16,
	"CallStackOverflow":           17,
}

func (x RuntimeStatus) String() string {
	return proto.EnumName(RuntimeStatus_name, int32(x))
}

func (RuntimeStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5824ced5fb3a3c2c, []int{4}
}

type VMVerificationStatus_StatusKind int32

const (
	VMVerificationStatus_SCRIPT     VMVerificationStatus_StatusKind = 0
	VMVerificationStatus_MODULE     VMVerificationStatus_StatusKind = 1
	VMVerificationStatus_DEPENDENCY VMVerificationStatus_StatusKind = 2
)

var VMVerificationStatus_StatusKind_name = map[int32]string{
	0: "SCRIPT",
	1: "MODULE",
	2: "DEPENDENCY",
}

var VMVerificationStatus_StatusKind_value = map[string]int32{
	"SCRIPT":     0,
	"MODULE":     1,
	"DEPENDENCY": 2,
}

func (x VMVerificationStatus_StatusKind) String() string {
	return proto.EnumName(VMVerificationStatus_StatusKind_name, int32(x))
}

func (VMVerificationStatus_StatusKind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5824ced5fb3a3c2c, []int{2, 0}
}

type ArithmeticError_ArithmeticErrorType int32

const (
	ArithmeticError_UnknownArithmeticError ArithmeticError_ArithmeticErrorType = 0
	ArithmeticError_Underflow              ArithmeticError_ArithmeticErrorType = 1
	ArithmeticError_Overflow               ArithmeticError_ArithmeticErrorType = 2
	ArithmeticError_DivisionByZero         ArithmeticError_ArithmeticErrorType = 3
)

var ArithmeticError_ArithmeticErrorType_name = map[int32]string{
	0: "UnknownArithmeticError",
	1: "Underflow",
	2: "Overflow",
	3: "DivisionByZero",
}

var ArithmeticError_ArithmeticErrorType_value = map[string]int32{
	"UnknownArithmeticError": 0,
	"Underflow":              1,
	"Overflow":               2,
	"DivisionByZero":         3,
}

func (x ArithmeticError_ArithmeticErrorType) String() string {
	return proto.EnumName(ArithmeticError_ArithmeticErrorType_name, int32(x))
}

func (ArithmeticError_ArithmeticErrorType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5824ced5fb3a3c2c, []int{4, 0}
}

type DynamicReferenceError_DynamicReferenceErrorType int32

const (
	DynamicReferenceError_UnknownDynamicReferenceError DynamicReferenceError_DynamicReferenceErrorType = 0
	DynamicReferenceError_MoveOfBorrowedResource       DynamicReferenceError_DynamicReferenceErrorType = 1
	DynamicReferenceError_GlobalRefAlreadyReleased     DynamicReferenceError_DynamicReferenceErrorType = 2
	DynamicReferenceError_MissingReleaseRef            DynamicReferenceError_DynamicReferenceErrorType = 3
	DynamicReferenceError_GlobalAlreadyBorrowed        DynamicReferenceError_DynamicReferenceErrorType = 4
)

var DynamicReferenceError_DynamicReferenceErrorType_name = map[int32]string{
	0: "UnknownDynamicReferenceError",
	1: "MoveOfBorrowedResource",
	2: "GlobalRefAlreadyReleased",
	3: "MissingReleaseRef",
	4: "GlobalAlreadyBorrowed",
}

var DynamicReferenceError_DynamicReferenceErrorType_value = map[string]int32{
	"UnknownDynamicReferenceError": 0,
	"MoveOfBorrowedResource":       1,
	"GlobalRefAlreadyReleased":     2,
	"MissingReleaseRef":            3,
	"GlobalAlreadyBorrowed":        4,
}

func (x DynamicReferenceError_DynamicReferenceErrorType) String() string {
	return proto.EnumName(DynamicReferenceError_DynamicReferenceErrorType_name, int32(x))
}

func (DynamicReferenceError_DynamicReferenceErrorType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5824ced5fb3a3c2c, []int{5, 0}
}

type VMValidationStatus struct {
	Code                 VMValidationStatusCode `protobuf:"varint,1,opt,name=code,proto3,enum=types.VMValidationStatusCode" json:"code,omitempty"`
	Message              string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *VMValidationStatus) Reset()         { *m = VMValidationStatus{} }
func (m *VMValidationStatus) String() string { return proto.CompactTextString(m) }
func (*VMValidationStatus) ProtoMessage()    {}
func (*VMValidationStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_5824ced5fb3a3c2c, []int{0}
}

func (m *VMValidationStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VMValidationStatus.Unmarshal(m, b)
}
func (m *VMValidationStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VMValidationStatus.Marshal(b, m, deterministic)
}
func (m *VMValidationStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VMValidationStatus.Merge(m, src)
}
func (m *VMValidationStatus) XXX_Size() int {
	return xxx_messageInfo_VMValidationStatus.Size(m)
}
func (m *VMValidationStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_VMValidationStatus.DiscardUnknown(m)
}

var xxx_messageInfo_VMValidationStatus proto.InternalMessageInfo

func (m *VMValidationStatus) GetCode() VMValidationStatusCode {
	if m != nil {
		return m.Code
	}
	return VMValidationStatusCode_UnknownValidationStatus
}

func (m *VMValidationStatus) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type VMVerificationStatusList struct {
	StatusList           []*VMVerificationStatus `protobuf:"bytes,1,rep,name=status_list,json=statusList,proto3" json:"status_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *VMVerificationStatusList) Reset()         { *m = VMVerificationStatusList{} }
func (m *VMVerificationStatusList) String() string { return proto.CompactTextString(m) }
func (*VMVerificationStatusList) ProtoMessage()    {}
func (*VMVerificationStatusList) Descriptor() ([]byte, []int) {
	return fileDescriptor_5824ced5fb3a3c2c, []int{1}
}

func (m *VMVerificationStatusList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VMVerificationStatusList.Unmarshal(m, b)
}
func (m *VMVerificationStatusList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VMVerificationStatusList.Marshal(b, m, deterministic)
}
func (m *VMVerificationStatusList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VMVerificationStatusList.Merge(m, src)
}
func (m *VMVerificationStatusList) XXX_Size() int {
	return xxx_messageInfo_VMVerificationStatusList.Size(m)
}
func (m *VMVerificationStatusList) XXX_DiscardUnknown() {
	xxx_messageInfo_VMVerificationStatusList.DiscardUnknown(m)
}

var xxx_messageInfo_VMVerificationStatusList proto.InternalMessageInfo

func (m *VMVerificationStatusList) GetStatusList() []*VMVerificationStatus {
	if m != nil {
		return m.StatusList
	}
	return nil
}

type VMVerificationStatus struct {
	StatusKind VMVerificationStatus_StatusKind `protobuf:"varint,1,opt,name=status_kind,json=statusKind,proto3,enum=types.VMVerificationStatus_StatusKind" json:"status_kind,omitempty"`
	// For StatusKind::SCRIPT and DEPENDENCY this is ignored.
	ModuleIdx uint32                  `protobuf:"varint,2,opt,name=module_idx,json=moduleIdx,proto3" json:"module_idx,omitempty"`
	ErrorKind VMVerificationErrorKind `protobuf:"varint,3,opt,name=error_kind,json=errorKind,proto3,enum=types.VMVerificationErrorKind" json:"error_kind,omitempty"`
	Message   string                  `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	// For StatusKind::SCRIPT and MODULE this is ignored.
	DependencyId         *ModuleId `protobuf:"bytes,5,opt,name=dependency_id,json=dependencyId,proto3" json:"dependency_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *VMVerificationStatus) Reset()         { *m = VMVerificationStatus{} }
func (m *VMVerificationStatus) String() string { return proto.CompactTextString(m) }
func (*VMVerificationStatus) ProtoMessage()    {}
func (*VMVerificationStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_5824ced5fb3a3c2c, []int{2}
}

func (m *VMVerificationStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VMVerificationStatus.Unmarshal(m, b)
}
func (m *VMVerificationStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VMVerificationStatus.Marshal(b, m, deterministic)
}
func (m *VMVerificationStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VMVerificationStatus.Merge(m, src)
}
func (m *VMVerificationStatus) XXX_Size() int {
	return xxx_messageInfo_VMVerificationStatus.Size(m)
}
func (m *VMVerificationStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_VMVerificationStatus.DiscardUnknown(m)
}

var xxx_messageInfo_VMVerificationStatus proto.InternalMessageInfo

func (m *VMVerificationStatus) GetStatusKind() VMVerificationStatus_StatusKind {
	if m != nil {
		return m.StatusKind
	}
	return VMVerificationStatus_SCRIPT
}

func (m *VMVerificationStatus) GetModuleIdx() uint32 {
	if m != nil {
		return m.ModuleIdx
	}
	return 0
}

func (m *VMVerificationStatus) GetErrorKind() VMVerificationErrorKind {
	if m != nil {
		return m.ErrorKind
	}
	return VMVerificationErrorKind_UnknownVerificationError
}

func (m *VMVerificationStatus) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *VMVerificationStatus) GetDependencyId() *ModuleId {
	if m != nil {
		return m.DependencyId
	}
	return nil
}

// user-defined abort error code number
type Aborted struct {
	AbortedErrorCode     uint64   `protobuf:"varint,1,opt,name=aborted_error_code,json=abortedErrorCode,proto3" json:"aborted_error_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Aborted) Reset()         { *m = Aborted{} }
func (m *Aborted) String() string { return proto.CompactTextString(m) }
func (*Aborted) ProtoMessage()    {}
func (*Aborted) Descriptor() ([]byte, []int) {
	return fileDescriptor_5824ced5fb3a3c2c, []int{3}
}

func (m *Aborted) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Aborted.Unmarshal(m, b)
}
func (m *Aborted) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Aborted.Marshal(b, m, deterministic)
}
func (m *Aborted) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Aborted.Merge(m, src)
}
func (m *Aborted) XXX_Size() int {
	return xxx_messageInfo_Aborted.Size(m)
}
func (m *Aborted) XXX_DiscardUnknown() {
	xxx_messageInfo_Aborted.DiscardUnknown(m)
}

var xxx_messageInfo_Aborted proto.InternalMessageInfo

func (m *Aborted) GetAbortedErrorCode() uint64 {
	if m != nil {
		return m.AbortedErrorCode
	}
	return 0
}

type ArithmeticError struct {
	ErrorCode            ArithmeticError_ArithmeticErrorType `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3,enum=types.ArithmeticError_ArithmeticErrorType" json:"error_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *ArithmeticError) Reset()         { *m = ArithmeticError{} }
func (m *ArithmeticError) String() string { return proto.CompactTextString(m) }
func (*ArithmeticError) ProtoMessage()    {}
func (*ArithmeticError) Descriptor() ([]byte, []int) {
	return fileDescriptor_5824ced5fb3a3c2c, []int{4}
}

func (m *ArithmeticError) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ArithmeticError.Unmarshal(m, b)
}
func (m *ArithmeticError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ArithmeticError.Marshal(b, m, deterministic)
}
func (m *ArithmeticError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArithmeticError.Merge(m, src)
}
func (m *ArithmeticError) XXX_Size() int {
	return xxx_messageInfo_ArithmeticError.Size(m)
}
func (m *ArithmeticError) XXX_DiscardUnknown() {
	xxx_messageInfo_ArithmeticError.DiscardUnknown(m)
}

var xxx_messageInfo_ArithmeticError proto.InternalMessageInfo

func (m *ArithmeticError) GetErrorCode() ArithmeticError_ArithmeticErrorType {
	if m != nil {
		return m.ErrorCode
	}
	return ArithmeticError_UnknownArithmeticError
}

type DynamicReferenceError struct {
	ErrorCode            DynamicReferenceError_DynamicReferenceErrorType `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3,enum=types.DynamicReferenceError_DynamicReferenceErrorType" json:"error_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                        `json:"-"`
	XXX_unrecognized     []byte                                          `json:"-"`
	XXX_sizecache        int32                                           `json:"-"`
}

func (m *DynamicReferenceError) Reset()         { *m = DynamicReferenceError{} }
func (m *DynamicReferenceError) String() string { return proto.CompactTextString(m) }
func (*DynamicReferenceError) ProtoMessage()    {}
func (*DynamicReferenceError) Descriptor() ([]byte, []int) {
	return fileDescriptor_5824ced5fb3a3c2c, []int{5}
}

func (m *DynamicReferenceError) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DynamicReferenceError.Unmarshal(m, b)
}
func (m *DynamicReferenceError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DynamicReferenceError.Marshal(b, m, deterministic)
}
func (m *DynamicReferenceError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DynamicReferenceError.Merge(m, src)
}
func (m *DynamicReferenceError) XXX_Size() int {
	return xxx_messageInfo_DynamicReferenceError.Size(m)
}
func (m *DynamicReferenceError) XXX_DiscardUnknown() {
	xxx_messageInfo_DynamicReferenceError.DiscardUnknown(m)
}

var xxx_messageInfo_DynamicReferenceError proto.InternalMessageInfo

func (m *DynamicReferenceError) GetErrorCode() DynamicReferenceError_DynamicReferenceErrorType {
	if m != nil {
		return m.ErrorCode
	}
	return DynamicReferenceError_UnknownDynamicReferenceError
}

type ExecutionStatus struct {
	// Types that are valid to be assigned to ExecutionStatus:
	//	*ExecutionStatus_RuntimeStatus
	//	*ExecutionStatus_Aborted
	//	*ExecutionStatus_ArithmeticError
	//	*ExecutionStatus_ReferenceError
	ExecutionStatus      isExecutionStatus_ExecutionStatus `protobuf_oneof:"execution_status"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *ExecutionStatus) Reset()         { *m = ExecutionStatus{} }
func (m *ExecutionStatus) String() string { return proto.CompactTextString(m) }
func (*ExecutionStatus) ProtoMessage()    {}
func (*ExecutionStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_5824ced5fb3a3c2c, []int{6}
}

func (m *ExecutionStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExecutionStatus.Unmarshal(m, b)
}
func (m *ExecutionStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExecutionStatus.Marshal(b, m, deterministic)
}
func (m *ExecutionStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecutionStatus.Merge(m, src)
}
func (m *ExecutionStatus) XXX_Size() int {
	return xxx_messageInfo_ExecutionStatus.Size(m)
}
func (m *ExecutionStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecutionStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ExecutionStatus proto.InternalMessageInfo

type isExecutionStatus_ExecutionStatus interface {
	isExecutionStatus_ExecutionStatus()
}

type ExecutionStatus_RuntimeStatus struct {
	RuntimeStatus RuntimeStatus `protobuf:"varint,1,opt,name=runtime_status,json=runtimeStatus,proto3,enum=types.RuntimeStatus,oneof"`
}

type ExecutionStatus_Aborted struct {
	Aborted *Aborted `protobuf:"bytes,2,opt,name=aborted,proto3,oneof"`
}

type ExecutionStatus_ArithmeticError struct {
	ArithmeticError *ArithmeticError `protobuf:"bytes,3,opt,name=arithmetic_error,json=arithmeticError,proto3,oneof"`
}

type ExecutionStatus_ReferenceError struct {
	ReferenceError *DynamicReferenceError `protobuf:"bytes,4,opt,name=reference_error,json=referenceError,proto3,oneof"`
}

func (*ExecutionStatus_RuntimeStatus) isExecutionStatus_ExecutionStatus() {}

func (*ExecutionStatus_Aborted) isExecutionStatus_ExecutionStatus() {}

func (*ExecutionStatus_ArithmeticError) isExecutionStatus_ExecutionStatus() {}

func (*ExecutionStatus_ReferenceError) isExecutionStatus_ExecutionStatus() {}

func (m *ExecutionStatus) GetExecutionStatus() isExecutionStatus_ExecutionStatus {
	if m != nil {
		return m.ExecutionStatus
	}
	return nil
}

func (m *ExecutionStatus) GetRuntimeStatus() RuntimeStatus {
	if x, ok := m.GetExecutionStatus().(*ExecutionStatus_RuntimeStatus); ok {
		return x.RuntimeStatus
	}
	return RuntimeStatus_UnknownRuntimeStatus
}

func (m *ExecutionStatus) GetAborted() *Aborted {
	if x, ok := m.GetExecutionStatus().(*ExecutionStatus_Aborted); ok {
		return x.Aborted
	}
	return nil
}

func (m *ExecutionStatus) GetArithmeticError() *ArithmeticError {
	if x, ok := m.GetExecutionStatus().(*ExecutionStatus_ArithmeticError); ok {
		return x.ArithmeticError
	}
	return nil
}

func (m *ExecutionStatus) GetReferenceError() *DynamicReferenceError {
	if x, ok := m.GetExecutionStatus().(*ExecutionStatus_ReferenceError); ok {
		return x.ReferenceError
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ExecutionStatus) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ExecutionStatus_RuntimeStatus)(nil),
		(*ExecutionStatus_Aborted)(nil),
		(*ExecutionStatus_ArithmeticError)(nil),
		(*ExecutionStatus_ReferenceError)(nil),
	}
}

// The status of the VM
type VMStatus struct {
	// Types that are valid to be assigned to ErrorType:
	//	*VMStatus_Validation
	//	*VMStatus_Verification
	//	*VMStatus_InvariantViolation
	//	*VMStatus_Deserialization
	//	*VMStatus_Execution
	ErrorType            isVMStatus_ErrorType `protobuf_oneof:"error_type"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *VMStatus) Reset()         { *m = VMStatus{} }
func (m *VMStatus) String() string { return proto.CompactTextString(m) }
func (*VMStatus) ProtoMessage()    {}
func (*VMStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_5824ced5fb3a3c2c, []int{7}
}

func (m *VMStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VMStatus.Unmarshal(m, b)
}
func (m *VMStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VMStatus.Marshal(b, m, deterministic)
}
func (m *VMStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VMStatus.Merge(m, src)
}
func (m *VMStatus) XXX_Size() int {
	return xxx_messageInfo_VMStatus.Size(m)
}
func (m *VMStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_VMStatus.DiscardUnknown(m)
}

var xxx_messageInfo_VMStatus proto.InternalMessageInfo

type isVMStatus_ErrorType interface {
	isVMStatus_ErrorType()
}

type VMStatus_Validation struct {
	Validation *VMValidationStatus `protobuf:"bytes,1,opt,name=validation,proto3,oneof"`
}

type VMStatus_Verification struct {
	Verification *VMVerificationStatusList `protobuf:"bytes,2,opt,name=verification,proto3,oneof"`
}

type VMStatus_InvariantViolation struct {
	InvariantViolation VMInvariantViolationError `protobuf:"varint,3,opt,name=invariant_violation,json=invariantViolation,proto3,enum=types.VMInvariantViolationError,oneof"`
}

type VMStatus_Deserialization struct {
	Deserialization BinaryError `protobuf:"varint,4,opt,name=deserialization,proto3,enum=types.BinaryError,oneof"`
}

type VMStatus_Execution struct {
	Execution *ExecutionStatus `protobuf:"bytes,5,opt,name=execution,proto3,oneof"`
}

func (*VMStatus_Validation) isVMStatus_ErrorType() {}

func (*VMStatus_Verification) isVMStatus_ErrorType() {}

func (*VMStatus_InvariantViolation) isVMStatus_ErrorType() {}

func (*VMStatus_Deserialization) isVMStatus_ErrorType() {}

func (*VMStatus_Execution) isVMStatus_ErrorType() {}

func (m *VMStatus) GetErrorType() isVMStatus_ErrorType {
	if m != nil {
		return m.ErrorType
	}
	return nil
}

func (m *VMStatus) GetValidation() *VMValidationStatus {
	if x, ok := m.GetErrorType().(*VMStatus_Validation); ok {
		return x.Validation
	}
	return nil
}

func (m *VMStatus) GetVerification() *VMVerificationStatusList {
	if x, ok := m.GetErrorType().(*VMStatus_Verification); ok {
		return x.Verification
	}
	return nil
}

func (m *VMStatus) GetInvariantViolation() VMInvariantViolationError {
	if x, ok := m.GetErrorType().(*VMStatus_InvariantViolation); ok {
		return x.InvariantViolation
	}
	return VMInvariantViolationError_UnknownInvariantViolationError
}

func (m *VMStatus) GetDeserialization() BinaryError {
	if x, ok := m.GetErrorType().(*VMStatus_Deserialization); ok {
		return x.Deserialization
	}
	return BinaryError_UnknownBinaryError
}

func (m *VMStatus) GetExecution() *ExecutionStatus {
	if x, ok := m.GetErrorType().(*VMStatus_Execution); ok {
		return x.Execution
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*VMStatus) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*VMStatus_Validation)(nil),
		(*VMStatus_Verification)(nil),
		(*VMStatus_InvariantViolation)(nil),
		(*VMStatus_Deserialization)(nil),
		(*VMStatus_Execution)(nil),
	}
}

func init() {
	proto.RegisterEnum("types.VMValidationStatusCode", VMValidationStatusCode_name, VMValidationStatusCode_value)
	proto.RegisterEnum("types.VMVerificationErrorKind", VMVerificationErrorKind_name, VMVerificationErrorKind_value)
	proto.RegisterEnum("types.VMInvariantViolationError", VMInvariantViolationError_name, VMInvariantViolationError_value)
	proto.RegisterEnum("types.BinaryError", BinaryError_name, BinaryError_value)
	proto.RegisterEnum("types.RuntimeStatus", RuntimeStatus_name, RuntimeStatus_value)
	proto.RegisterEnum("types.VMVerificationStatus_StatusKind", VMVerificationStatus_StatusKind_name, VMVerificationStatus_StatusKind_value)
	proto.RegisterEnum("types.ArithmeticError_ArithmeticErrorType", ArithmeticError_ArithmeticErrorType_name, ArithmeticError_ArithmeticErrorType_value)
	proto.RegisterEnum("types.DynamicReferenceError_DynamicReferenceErrorType", DynamicReferenceError_DynamicReferenceErrorType_name, DynamicReferenceError_DynamicReferenceErrorType_value)
	proto.RegisterType((*VMValidationStatus)(nil), "types.VMValidationStatus")
	proto.RegisterType((*VMVerificationStatusList)(nil), "types.VMVerificationStatusList")
	proto.RegisterType((*VMVerificationStatus)(nil), "types.VMVerificationStatus")
	proto.RegisterType((*Aborted)(nil), "types.Aborted")
	proto.RegisterType((*ArithmeticError)(nil), "types.ArithmeticError")
	proto.RegisterType((*DynamicReferenceError)(nil), "types.DynamicReferenceError")
	proto.RegisterType((*ExecutionStatus)(nil), "types.ExecutionStatus")
	proto.RegisterType((*VMStatus)(nil), "types.VMStatus")
}

func init() { proto.RegisterFile("vm_errors.proto", fileDescriptor_5824ced5fb3a3c2c) }

var fileDescriptor_5824ced5fb3a3c2c = []byte{
	// 2278 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x58, 0xdb, 0x5a, 0x23, 0xc7,
	0x11, 0x96, 0xc4, 0x69, 0x69, 0x01, 0xea, 0xed, 0xdd, 0x65, 0xd9, 0x33, 0x96, 0xed, 0x35, 0x26,
	0x6b, 0x36, 0xc6, 0x8e, 0x1d, 0xc7, 0x87, 0x04, 0x21, 0xb1, 0x60, 0x23, 0xe0, 0x1b, 0x01, 0x4e,
	0x7c, 0xc3, 0xd7, 0x9a, 0x29, 0x89, 0x0e, 0xa3, 0x6e, 0xb9, 0xa7, 0x47, 0x2b, 0xfc, 0x0e, 0x79,
	0x81, 0x5c, 0xe4, 0x3e, 0x8f, 0x90, 0xbb, 0x7c, 0x5f, 0xae, 0xf3, 0x20, 0x79, 0x83, 0xe4, 0x2e,
	0x5f, 0x75, 0xcf, 0x0c, 0xa3, 0x03, 0xf6, 0x15, 0x4c, 0xfd, 0x75, 0xe8, 0x3a, 0x74, 0x55, 0xb5,
	0x48, 0x65, 0xd0, 0xbb, 0x00, 0xad, 0x95, 0x8e, 0xb6, 0xfa, 0x5a, 0x19, 0xc5, 0xe6, 0xcc, 0x75,
	0x1f, 0xa2, 0xc7, 0xab, 0x21, 0x97, 0xdd, 0x98, 0x77, 0xe1, 0x22, 0x32, 0x4a, 0xf3, 0x2e, 0x38,
	0xb8, 0xca, 0x09, 0x3b, 0x6f, 0x9e, 0xf3, 0x50, 0x04, 0xdc, 0x08, 0x25, 0x5b, 0x86, 0x9b, 0x38,
	0x62, 0x1f, 0x93, 0x59, 0x5f, 0x05, 0xb0, 0x56, 0x5c, 0x2f, 0x6e, 0xac, 0x6c, 0x3f, 0xdb, 0xb2,
	0x3a, 0xb6, 0x26, 0x19, 0x77, 0x55, 0x00, 0x9e, 0x65, 0x65, 0x6b, 0x64, 0xa1, 0x07, 0x51, 0xc4,
	0xbb, 0xb0, 0x56, 0x5a, 0x2f, 0x6e, 0x2c, 0x7a, 0xe9, 0x67, 0xf5, 0x8f, 0x64, 0xed, 0xbc, 0x79,
	0x0e, 0x5a, 0x74, 0x84, 0x9f, 0x93, 0x3d, 0x14, 0x91, 0x61, 0x5f, 0x91, 0x72, 0x64, 0xbf, 0x2e,
	0x42, 0x11, 0x99, 0xb5, 0xe2, 0xfa, 0xcc, 0x46, 0x79, 0xfb, 0xc9, 0x8d, 0xbd, 0x09, 0x29, 0x8f,
	0x44, 0x99, 0x74, 0xf5, 0x5f, 0x25, 0x72, 0x7f, 0x1a, 0x13, 0x7b, 0x93, 0xa9, 0xbd, 0x12, 0x32,
	0x48, 0xdc, 0x78, 0xf9, 0x33, 0x6a, 0xb7, 0xdc, 0x9f, 0xef, 0x84, 0x0c, 0x52, 0x0b, 0xf8, 0x3f,
	0x7b, 0x46, 0x48, 0x4f, 0x05, 0x71, 0x08, 0x17, 0x22, 0x18, 0x5a, 0xc7, 0x96, 0xbd, 0x45, 0x47,
	0x39, 0x08, 0x86, 0xec, 0x6b, 0x42, 0x6c, 0xb0, 0x9d, 0x99, 0x19, 0x6b, 0xe6, 0xf9, 0x54, 0x33,
	0x0d, 0x64, 0xb3, 0xea, 0x17, 0x21, 0xfd, 0x37, 0x1f, 0xb3, 0xd9, 0x91, 0x98, 0xb1, 0x4f, 0xc9,
	0x72, 0x00, 0x7d, 0x90, 0x01, 0x48, 0xff, 0xfa, 0x42, 0x04, 0x6b, 0x73, 0xeb, 0xc5, 0x8d, 0xf2,
	0x76, 0x25, 0xd1, 0xdd, 0x4c, 0x4e, 0xe0, 0x2d, 0xdd, 0x70, 0x1d, 0x04, 0xd5, 0x4f, 0x09, 0xb9,
	0xf1, 0x83, 0x11, 0x32, 0xdf, 0xda, 0xf5, 0x0e, 0x4e, 0x4e, 0x69, 0x01, 0xff, 0x6f, 0x1e, 0xd7,
	0xcf, 0x0e, 0x1b, 0xb4, 0xc8, 0x56, 0x08, 0xa9, 0x37, 0x4e, 0x1a, 0x47, 0xf5, 0xc6, 0xd1, 0xee,
	0x9f, 0x68, 0xa9, 0xfa, 0x39, 0x59, 0xd8, 0x69, 0x2b, 0x6d, 0x20, 0x60, 0xaf, 0x08, 0xe3, 0xee,
	0x5f, 0x57, 0x44, 0x17, 0x59, 0x15, 0xcc, 0x7a, 0x34, 0x41, 0xac, 0x27, 0x98, 0xf8, 0xea, 0x3f,
	0x8b, 0xa4, 0xb2, 0xa3, 0x85, 0xb9, 0xec, 0x81, 0x11, 0xbe, 0xa5, 0xb3, 0x83, 0x34, 0x22, 0xb9,
	0xfa, 0xd9, 0x4c, 0x4e, 0x3d, 0xc6, 0x3b, 0xfe, 0x7d, 0x7a, 0xdd, 0x87, 0x24, 0x3a, 0x56, 0x7d,
	0x9b, 0xdc, 0x9b, 0xc2, 0xc1, 0x1e, 0x93, 0xd5, 0x33, 0x79, 0x25, 0xd5, 0x5b, 0x39, 0x86, 0xd2,
	0x02, 0x5b, 0x26, 0x8b, 0x67, 0x32, 0x00, 0xdd, 0x09, 0xd5, 0x5b, 0x5a, 0x64, 0x4b, 0xe4, 0xce,
	0xf1, 0x20, 0xf9, 0x2a, 0x31, 0x46, 0x56, 0xea, 0x62, 0x20, 0x22, 0xa1, 0x64, 0xed, 0xfa, 0x07,
	0xd0, 0x8a, 0xce, 0x54, 0xff, 0x5a, 0x22, 0x0f, 0xea, 0xd7, 0x92, 0xf7, 0x84, 0xef, 0x41, 0x07,
	0x34, 0x48, 0x1f, 0x9c, 0x23, 0x67, 0x53, 0x1c, 0xf9, 0x2c, 0x71, 0x64, 0xaa, 0xc4, 0x74, 0xea,
	0xb8, 0x53, 0x7f, 0x2f, 0x92, 0x47, 0xb7, 0x32, 0xb2, 0x75, 0xf2, 0x34, 0xf1, 0x6d, 0x2a, 0x0f,
	0x2d, 0xa0, 0xf7, 0x4d, 0x35, 0x80, 0xe3, 0x4e, 0x4d, 0x69, 0xad, 0xde, 0x42, 0xe0, 0x41, 0xa4,
	0x62, 0xed, 0x03, 0x2d, 0xb2, 0xa7, 0x64, 0xed, 0x4d, 0xa8, 0xda, 0x3c, 0xf4, 0xa0, 0xb3, 0x13,
	0x6a, 0xe0, 0xc1, 0xb5, 0x07, 0x21, 0xf0, 0x08, 0x02, 0x5a, 0x62, 0x0f, 0xc8, 0xdd, 0xa6, 0x88,
	0x22, 0x21, 0xbb, 0x09, 0xd1, 0x83, 0x0e, 0x9d, 0x61, 0x8f, 0xc8, 0x03, 0x27, 0x94, 0x48, 0xa4,
	0x7a, 0xe9, 0x6c, 0xf5, 0x6f, 0x25, 0x52, 0x69, 0x0c, 0xc1, 0x8f, 0x73, 0x37, 0xeb, 0x6b, 0xb2,
	0xa2, 0x63, 0x69, 0x44, 0x0f, 0x1b, 0x09, 0x52, 0x92, 0xd0, 0xdc, 0x4f, 0x42, 0xe3, 0x39, 0xd0,
	0x71, 0xef, 0x17, 0xbc, 0x65, 0x9d, 0x27, 0xb0, 0x4d, 0xb2, 0x90, 0x94, 0x91, 0xbd, 0x4c, 0xe5,
	0xed, 0x95, 0xb4, 0x36, 0x1c, 0x75, 0xbf, 0xe0, 0xa5, 0x0c, 0x6c, 0x97, 0x50, 0x9e, 0x65, 0xd8,
	0xd5, 0xa3, 0xbd, 0x62, 0xe5, 0xed, 0xd5, 0xe9, 0x05, 0xb5, 0x5f, 0xf0, 0x2a, 0x7c, 0xac, 0x1e,
	0xdf, 0x90, 0x8a, 0x4e, 0x63, 0x98, 0xe8, 0x98, 0xb5, 0x3a, 0x9e, 0xfe, 0x5c, 0x2e, 0xf7, 0x0b,
	0xde, 0x8a, 0x1e, 0xa1, 0xd4, 0x18, 0xa1, 0x90, 0xc6, 0x22, 0x71, 0xbd, 0xfa, 0x9f, 0x12, 0xb9,
	0x73, 0xde, 0x4c, 0x5c, 0xfb, 0x92, 0x90, 0x41, 0xd6, 0x1e, 0x6d, 0x54, 0xca, 0xdb, 0x8f, 0x6e,
	0xed, 0x9c, 0xfb, 0x05, 0x2f, 0xc7, 0xce, 0x1a, 0x64, 0x69, 0x90, 0xeb, 0x16, 0x49, 0x70, 0x5e,
	0xfc, 0x4c, 0xc7, 0xc2, 0x06, 0xb8, 0x5f, 0xf0, 0x46, 0xc4, 0x58, 0x8b, 0xdc, 0x13, 0x72, 0xc0,
	0xb5, 0xe0, 0xd2, 0x5c, 0x0c, 0x84, 0x0a, 0x9d, 0x36, 0xd7, 0x98, 0xd6, 0x33, 0x6d, 0x07, 0x29,
	0xcf, 0x79, 0xca, 0x92, 0x7a, 0xcd, 0xc4, 0x04, 0xc4, 0xbe, 0x21, 0x95, 0x00, 0x22, 0xd0, 0x82,
	0x87, 0xe2, 0x27, 0xa7, 0x70, 0xd6, 0x2a, 0x64, 0x89, 0xc2, 0x9a, 0x90, 0x5c, 0x5f, 0x67, 0x29,
	0x18, 0x63, 0x66, 0x9f, 0x91, 0xc5, 0x2c, 0x72, 0x49, 0x1f, 0x4b, 0x13, 0x38, 0x56, 0x5d, 0xfb,
	0x05, 0xef, 0x86, 0xb5, 0xb6, 0x94, 0xde, 0x40, 0xe4, 0xdd, 0xfc, 0xef, 0x0c, 0x59, 0x9d, 0x3e,
	0x80, 0xd8, 0x13, 0xf2, 0x30, 0xb9, 0x35, 0xe3, 0x30, 0x2d, 0xb0, 0xfb, 0x84, 0xa2, 0xbb, 0xa1,
	0x08, 0x5a, 0xa2, 0x2b, 0xb9, 0x89, 0x35, 0x5e, 0x15, 0x46, 0x56, 0x12, 0xea, 0x4e, 0x6c, 0x2e,
	0xbf, 0x83, 0x6b, 0x5a, 0x62, 0x6b, 0xe4, 0x7e, 0x0b, 0x7e, 0x8c, 0x31, 0xe5, 0x47, 0x71, 0xaf,
	0x0d, 0xfa, 0x54, 0xa9, 0xe3, 0x30, 0xa0, 0x33, 0x53, 0x91, 0x23, 0x78, 0x4b, 0x67, 0xd9, 0x06,
	0x79, 0xef, 0x40, 0x46, 0x71, 0xa7, 0x23, 0x7c, 0x01, 0xd2, 0xd4, 0x78, 0xc8, 0xa5, 0x0f, 0x7b,
	0x4a, 0x9f, 0x6a, 0x2e, 0x23, 0xee, 0xe3, 0x51, 0xf6, 0x00, 0xe8, 0x1c, 0x5b, 0x25, 0x2c, 0x47,
	0x6b, 0x0c, 0xfb, 0x42, 0x43, 0x40, 0xe7, 0xd9, 0x73, 0xf2, 0xb8, 0x05, 0x32, 0x10, 0xb2, 0xbb,
	0xe3, 0xfb, 0x2a, 0x96, 0xa6, 0xae, 0x20, 0x3a, 0x52, 0xa6, 0x31, 0x14, 0x91, 0xa1, 0x0b, 0x78,
	0x7e, 0x0f, 0xfe, 0x0c, 0xbe, 0x81, 0xe0, 0x7b, 0x2d, 0x0c, 0xb4, 0xc0, 0xd0, 0x3b, 0xec, 0x1e,
	0xa9, 0x24, 0xe7, 0xcf, 0x88, 0x8b, 0xa8, 0xaa, 0x31, 0xf4, 0x01, 0x02, 0x08, 0x9a, 0x7c, 0x98,
	0xb3, 0xd6, 0x12, 0x3f, 0x01, 0x25, 0xec, 0x2e, 0x59, 0x4e, 0xe2, 0xd4, 0xf2, 0xb5, 0xe8, 0x1b,
	0x5a, 0xce, 0x91, 0xdc, 0x48, 0xa1, 0x4b, 0xec, 0x25, 0xa9, 0x36, 0xf9, 0xf0, 0x0d, 0x8f, 0xce,
	0xa4, 0x30, 0x91, 0x53, 0x18, 0xe5, 0x28, 0x35, 0x15, 0xcb, 0x80, 0x2e, 0xb3, 0x4d, 0xf2, 0x32,
	0x4f, 0x85, 0x50, 0xbd, 0x6d, 0x0a, 0x99, 0xb3, 0x9a, 0x42, 0x74, 0x85, 0x3d, 0x23, 0x8f, 0x92,
	0xaf, 0x13, 0x2d, 0x7c, 0x48, 0x99, 0x9d, 0xaa, 0xca, 0x38, 0xbc, 0xd3, 0x56, 0x03, 0x68, 0xf2,
	0xa1, 0x83, 0xe9, 0xe6, 0xbf, 0xef, 0x92, 0x87, 0xb7, 0x4c, 0x53, 0xec, 0x79, 0x69, 0xee, 0xc7,
	0xf1, 0x34, 0xf9, 0x01, 0x0c, 0x8f, 0x63, 0x83, 0x1d, 0x33, 0x96, 0x41, 0xe4, 0xfa, 0x24, 0xd6,
	0x0d, 0xda, 0x9b, 0x40, 0x4b, 0x36, 0xe0, 0x5c, 0x76, 0x21, 0x4f, 0xb5, 0x6d, 0x72, 0xbc, 0x8c,
	0x4e, 0xd5, 0x15, 0x48, 0x3a, 0x8b, 0xea, 0x12, 0x68, 0x4f, 0x40, 0x18, 0xd4, 0xa1, 0x93, 0x35,
	0x13, 0x3a, 0x87, 0xbe, 0x79, 0xe0, 0xc7, 0x3a, 0x12, 0x03, 0x68, 0x19, 0x1d, 0xfb, 0xa6, 0x0e,
	0x1d, 0x21, 0x05, 0x1e, 0x93, 0xce, 0x63, 0x69, 0x25, 0xc2, 0x69, 0x23, 0xb7, 0x4a, 0xe8, 0x02,
	0x16, 0x4c, 0xaa, 0x96, 0x87, 0xe1, 0xe9, 0xa5, 0x56, 0x71, 0xf7, 0x92, 0xde, 0x61, 0x15, 0x52,
	0xfe, 0x56, 0x09, 0xb9, 0xc7, 0x45, 0x88, 0xb5, 0xbc, 0x88, 0x43, 0xe3, 0x08, 0xba, 0xdc, 0x58,
	0x03, 0xdc, 0xbf, 0xc2, 0x6c, 0x7f, 0x2f, 0xcc, 0xa5, 0x90, 0xb5, 0x50, 0xf9, 0x57, 0x94, 0x60,
	0xb5, 0x9c, 0xc9, 0xb6, 0xab, 0xcd, 0xc0, 0xf2, 0xd0, 0x32, 0x8a, 0x25, 0xfa, 0x9b, 0x5c, 0xc8,
	0xbd, 0x58, 0x26, 0xa5, 0x92, 0x5e, 0x92, 0x25, 0x8c, 0x44, 0x3d, 0xee, 0x87, 0x18, 0x53, 0x68,
	0x84, 0xd0, 0x03, 0x69, 0xe8, 0x32, 0x7b, 0x48, 0xee, 0xa5, 0x72, 0xb6, 0x64, 0xf6, 0xb9, 0x0c,
	0x42, 0xa0, 0x2b, 0x08, 0x9c, 0x49, 0xd1, 0xeb, 0x3b, 0x4e, 0x08, 0x12, 0xa0, 0xe2, 0x3c, 0xf1,
	0x95, 0x8c, 0x44, 0x64, 0x40, 0x1a, 0xeb, 0x60, 0x44, 0x29, 0xa3, 0x64, 0xe9, 0x4c, 0xc6, 0x11,
	0x04, 0x09, 0xe5, 0x2e, 0x52, 0x0e, 0x95, 0xba, 0x8a, 0xfb, 0xe8, 0x1d, 0x04, 0x94, 0xa1, 0xec,
	0xb9, 0x88, 0x44, 0x5b, 0x84, 0xc2, 0x5c, 0x37, 0x45, 0xd4, 0xe3, 0xc6, 0xbf, 0xa4, 0xf7, 0x30,
	0x1f, 0x76, 0xb4, 0x42, 0xa4, 0x42, 0xdb, 0x2e, 0xd2, 0x78, 0xdc, 0x47, 0x25, 0x08, 0x65, 0xcc,
	0x0f, 0x72, 0xa3, 0xaf, 0x9e, 0xad, 0x4b, 0x74, 0x15, 0xc9, 0x27, 0xaa, 0x3f, 0x36, 0x62, 0x1f,
	0xa2, 0xdb, 0x96, 0xec, 0xd2, 0xe1, 0xa8, 0x6b, 0xec, 0x05, 0x79, 0x72, 0x33, 0x37, 0xf3, 0xfa,
	0x1d, 0xc3, 0x23, 0x74, 0xbf, 0xa6, 0x27, 0x81, 0xc7, 0x38, 0xb2, 0xed, 0x74, 0x9b, 0xc4, 0x9e,
	0x20, 0xd6, 0x32, 0x87, 0xca, 0x9f, 0xc4, 0x9e, 0x62, 0xe5, 0x58, 0xec, 0x4c, 0x46, 0xbc, 0x03,
	0xa7, 0xaa, 0x0e, 0x91, 0xd1, 0xca, 0xf5, 0x59, 0xfa, 0x0c, 0xbb, 0x9e, 0x07, 0x66, 0x2a, 0xf8,
	0x1c, 0xcb, 0xca, 0x83, 0x29, 0x16, 0x5f, 0x60, 0x93, 0xd8, 0xd3, 0x00, 0x3f, 0x4d, 0x77, 0x63,
	0x9d, 0xbd, 0x4f, 0xde, 0xc9, 0x70, 0xdb, 0x83, 0xa2, 0x66, 0x6c, 0x78, 0x3b, 0x04, 0xb7, 0x18,
	0x38, 0xb6, 0x77, 0xb0, 0x7a, 0x1c, 0xc1, 0xe6, 0x6e, 0x52, 0x51, 0x15, 0xaf, 0x45, 0x8e, 0xa3,
	0xc6, 0x5d, 0x96, 0x1d, 0xfa, 0x2e, 0xfb, 0x80, 0xbc, 0x9b, 0x43, 0x6f, 0x35, 0xf4, 0x1e, 0xba,
	0xb9, 0xab, 0xfa, 0xd7, 0x36, 0x0e, 0x7c, 0xc0, 0x45, 0x88, 0x2c, 0x0e, 0x7c, 0x1f, 0xdd, 0x4c,
	0xc0, 0xd1, 0x74, 0xbd, 0x74, 0x77, 0xdc, 0x22, 0x4e, 0x77, 0x5e, 0xe9, 0x07, 0xa8, 0x14, 0xb7,
	0xa8, 0x69, 0x4a, 0x37, 0x50, 0x34, 0x01, 0x27, 0x45, 0x3f, 0x44, 0x51, 0x47, 0xb0, 0x46, 0x47,
	0x4a, 0x67, 0x13, 0x53, 0x96, 0x81, 0x13, 0x9a, 0x7f, 0x85, 0xb1, 0xcf, 0xe0, 0x49, 0xdd, 0xaf,
	0xb0, 0xa8, 0x77, 0xf1, 0xae, 0x4f, 0x44, 0xf3, 0x23, 0x4c, 0x0b, 0x42, 0xe9, 0x76, 0x96, 0x84,
	0x6a, 0xec, 0x00, 0x5b, 0xa8, 0xe1, 0x84, 0xfb, 0x57, 0x93, 0x1a, 0x5e, 0xbb, 0x29, 0xd9, 0x9f,
	0x0a, 0xfe, 0x1a, 0x7d, 0xf6, 0x80, 0x07, 0x53, 0x6b, 0xe2, 0x63, 0x57, 0x4d, 0x16, 0x1d, 0x0d,
	0xf3, 0x36, 0x7b, 0x97, 0xbc, 0x48, 0x90, 0x5b, 0x53, 0xf8, 0x09, 0x46, 0xc5, 0x4e, 0xa9, 0xa9,
	0xda, 0x3f, 0xc5, 0x33, 0xa7, 0xf0, 0xa8, 0xfa, 0xdf, 0xe4, 0x25, 0x27, 0xe3, 0xf5, 0x19, 0x5a,
	0x4f, 0xe1, 0x23, 0x35, 0x3d, 0x24, 0x9f, 0x63, 0xd0, 0x0f, 0xa4, 0x81, 0x2e, 0xe8, 0xe3, 0xfe,
	0xa4, 0xf9, 0xdf, 0xba, 0xa4, 0xa8, 0x10, 0xb8, 0x9c, 0x86, 0x7f, 0x81, 0x17, 0xbf, 0xf1, 0x63,
	0xcc, 0xb1, 0xff, 0x4c, 0x63, 0xf8, 0x1d, 0x9e, 0xc2, 0x1d, 0x2e, 0x3d, 0xfd, 0x24, 0xd3, 0x97,
	0xe8, 0xa4, 0x63, 0x3a, 0x52, 0xa3, 0x4e, 0x7e, 0xc5, 0xde, 0x21, 0xcf, 0x9c, 0x5b, 0x6e, 0x0f,
	0x9f, 0x94, 0xfe, 0x1a, 0xcf, 0x90, 0x67, 0x19, 0xd7, 0xf1, 0x0d, 0x06, 0x0a, 0x6b, 0x76, 0x4f,
	0xab, 0xde, 0xa4, 0xfc, 0xef, 0xd3, 0x7a, 0x47, 0x78, 0x5c, 0xf6, 0x0f, 0x68, 0x1f, 0xc1, 0x53,
	0x85, 0x7b, 0x08, 0x4c, 0x69, 0x61, 0x3b, 0x68, 0x3f, 0xcf, 0x32, 0xae, 0xa3, 0xc6, 0xaa, 0xe4,
	0xf9, 0xae, 0x06, 0x6e, 0x20, 0x59, 0x62, 0x26, 0x95, 0xec, 0x62, 0x15, 0x65, 0xcf, 0x93, 0x7c,
	0x8a, 0xea, 0x18, 0x41, 0x37, 0x4b, 0x76, 0x82, 0x40, 0x43, 0x14, 0x25, 0x2b, 0x50, 0x13, 0xa5,
	0x9d, 0x45, 0xda, 0xc0, 0x21, 0x76, 0xa4, 0xf2, 0x23, 0x27, 0xa2, 0x7b, 0x76, 0x09, 0x71, 0x9d,
	0x7d, 0xc7, 0xff, 0x31, 0x16, 0x1a, 0xb2, 0x24, 0xec, 0x48, 0xa9, 0x4c, 0x6e, 0x19, 0x78, 0xc3,
	0x3e, 0x22, 0x1f, 0x36, 0x86, 0x46, 0x73, 0x09, 0x2a, 0x8e, 0x7e, 0x89, 0x7d, 0x9f, 0xbd, 0x22,
	0x1b, 0xd9, 0xf4, 0xfb, 0x25, 0xee, 0x03, 0x3c, 0x48, 0xba, 0x50, 0xfe, 0x02, 0xef, 0xb7, 0x9b,
	0x7f, 0x29, 0x91, 0x47, 0xb7, 0x2e, 0xe1, 0x18, 0xca, 0x64, 0xa3, 0xb9, 0x85, 0xc3, 0xed, 0x35,
	0xb9, 0xf5, 0xc4, 0x2e, 0x31, 0xb4, 0x38, 0x46, 0xb5, 0x4b, 0x0c, 0x2d, 0x61, 0xdc, 0x1a, 0xbd,
	0xbe, 0xb9, 0x3e, 0xe7, 0x61, 0xec, 0x16, 0x04, 0x3a, 0x83, 0xfb, 0xaf, 0x25, 0x62, 0x4f, 0x71,
	0xb4, 0x59, 0xb6, 0x42, 0xc8, 0xc9, 0x6e, 0xf6, 0x5e, 0x9e, 0xc3, 0x45, 0xe3, 0x50, 0xc8, 0x2b,
	0xd0, 0xce, 0xea, 0x3c, 0x4e, 0xb8, 0x43, 0xe5, 0x4f, 0xe4, 0x6f, 0x01, 0x27, 0x6e, 0xcb, 0xfd,
	0xaa, 0xe4, 0x28, 0x77, 0x70, 0xb4, 0xe2, 0xa5, 0xd3, 0xd2, 0xd5, 0xb3, 0x23, 0x2f, 0xe2, 0x09,
	0x1b, 0x03, 0x90, 0xe6, 0x3b, 0xb8, 0x99, 0xe5, 0x64, 0xf3, 0x7f, 0x45, 0x52, 0xce, 0xbd, 0x21,
	0x70, 0xe6, 0x27, 0x11, 0xc8, 0x51, 0xdd, 0xeb, 0xbe, 0xc9, 0xc3, 0x8e, 0xd2, 0x3d, 0x08, 0xdc,
	0xeb, 0xbe, 0xc6, 0x83, 0x26, 0xef, 0x0a, 0xdf, 0xbd, 0xee, 0x6f, 0x16, 0x41, 0x7c, 0xe3, 0xd3,
	0x19, 0x34, 0x97, 0xd0, 0x4e, 0xb1, 0x35, 0xe0, 0x49, 0xe8, 0x2c, 0xd6, 0x61, 0xba, 0x06, 0x67,
	0xab, 0x1c, 0x22, 0x73, 0x78, 0x49, 0x53, 0x24, 0x79, 0xc1, 0x80, 0x1d, 0x6d, 0x74, 0x3e, 0xb7,
	0x28, 0x1f, 0xf7, 0x7d, 0x15, 0x00, 0x5d, 0x40, 0x8b, 0x35, 0x1e, 0xec, 0x03, 0xc7, 0x4b, 0x83,
	0xfa, 0xe9, 0x1d, 0xd7, 0x64, 0x61, 0xd8, 0xb7, 0xfb, 0xfa, 0xa8, 0xfa, 0x45, 0xfb, 0x03, 0x44,
	0x5a, 0x51, 0x4e, 0x80, 0x6c, 0xfe, 0x63, 0x86, 0x2c, 0x8f, 0xbc, 0x99, 0x73, 0xc7, 0x1b, 0xa1,
	0xd3, 0x02, 0x3a, 0xec, 0x1e, 0x4c, 0xa9, 0xfb, 0x36, 0xdb, 0x6f, 0x78, 0xe4, 0x1e, 0x2f, 0x69,
	0xc1, 0x8d, 0x3c, 0x20, 0xec, 0xe6, 0x9a, 0x95, 0xa2, 0x7b, 0xe2, 0xbb, 0x46, 0xe4, 0x22, 0xd1,
	0x18, 0x08, 0x3c, 0x6a, 0x72, 0x6d, 0x77, 0x7c, 0x1f, 0xa2, 0x88, 0xce, 0xe1, 0x85, 0x4f, 0x49,
	0xee, 0x4a, 0x8e, 0x8a, 0xce, 0x63, 0x2e, 0x6e, 0x12, 0xbb, 0x80, 0xb5, 0x92, 0x6e, 0x58, 0xdc,
	0x70, 0xf7, 0x40, 0xc1, 0xff, 0xf6, 0x94, 0xee, 0x71, 0x93, 0xa6, 0xbf, 0x42, 0xca, 0xc9, 0x25,
	0xb1, 0x5c, 0x76, 0x31, 0xf5, 0xa0, 0xa7, 0x0c, 0xe0, 0xb7, 0xe3, 0x2a, 0xa3, 0xed, 0x5d, 0x8e,
	0x97, 0xc6, 0xf6, 0x76, 0x6b, 0xd1, 0xfe, 0x68, 0x91, 0xfc, 0xce, 0xb1, 0x84, 0x41, 0x76, 0xc5,
	0x9c, 0x7f, 0x66, 0x3a, 0xe9, 0x65, 0xec, 0x84, 0x16, 0xac, 0x8f, 0xbe, 0x42, 0x1d, 0x6c, 0x97,
	0xd4, 0x2c, 0x07, 0xae, 0x99, 0x1c, 0xf1, 0x1e, 0x2e, 0xa9, 0x8f, 0xc9, 0x6a, 0xfe, 0x35, 0xea,
	0x5f, 0x65, 0x37, 0x81, 0x62, 0x35, 0x67, 0x17, 0x25, 0x23, 0xdf, 0xad, 0x6d, 0xfd, 0xf0, 0xaa,
	0x2b, 0xcc, 0x65, 0xdc, 0xde, 0xf2, 0x55, 0xef, 0xb5, 0xb9, 0x84, 0xcf, 0xb7, 0xbf, 0x78, 0xdd,
	0x55, 0x1f, 0x85, 0xa2, 0xad, 0xf9, 0xeb, 0x2e, 0x48, 0xd0, 0xdc, 0x40, 0xf0, 0xba, 0xdf, 0xb6,
	0xaf, 0xdd, 0xf6, 0xbc, 0xfd, 0xc9, 0xf5, 0x93, 0xff, 0x07, 0x00, 0x00, 0xff, 0xff, 0x23, 0xcb,
	0x69, 0x9e, 0xa4, 0x15, 0x00, 0x00,
}
